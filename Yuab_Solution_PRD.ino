//*****************************************************
//**유압 솔루션 PRD 아두이노 코딩**
//1. 아두이노가 200도까지 BLDC모터를 3도씩 회전 5초 휴식 (400RPM - 2000RPM 기준 0.5 x 255 - 50 analogWrite)
//2. 빠른 속도로 복귀 (800RPM - 2000RPM 기준 0.4 * 255 - 102 analogWrite)
//3. 모든 섹터가 센서가 보기에 문제가 없다면 사이렌을 울리며 멈춘다

//** 유압 제어 아두이노 필요한 모듈 및 부품**
//1. 2채널 B타입 릴레이 1개 
//2. 아두이노 및 점퍼선
//3. BLDC 및 BLDC 드라이버 (가변 저항 조절기 포함)
//********************************************************************
//********************************************************************
//** 값 저장용 및 확인용 변수 선언**

 //---------------------------------------------------------------------------------------------
 //                                  기 타 변 수 저 장 구 역 
 //---------------------------------------------------------------------------------------------
 
int DIR = 3; // |방향 제어| 방향 제어용 릴레이
int SIRN = 4; // |사이렌| 작업 마침용 사이렌 릴레이

int RPM = 5; // |속도 제어| anlaogWrite로 0-255 값 내외에서 속도 RPM 제어

int count = 0; // |현재 위치 파악| 현재 위치 파악용 변수

//********************************************************************
//********************************************************************

void setup() {
  
//▶▶▶▶▶▶설명◀◀◀◀◀◀◀
//사전 아두이노가 켜졌을 때 세팅하는 준비 단계
 
Serial.begin(9600); //시리얼 통신 BAUD RATE 9600 주파수 선언

pinMode(DIR,OUTPUT); //|방향 제어| 방향 제어용 릴레이 변수 아웃풋 선언
pinMode(SIRN,OUTPUT); //|사이렌| 작업 마침 알림용 사이렌 릴레이 변수 아웃풋 선언

pinMode(RPM,OUTPUT); //|속도 제어| 속도 제어용 anlaogWrite 위한 아웃풋 선언

}

void loop() {

//********************************************************************
//                           ▶▶▶▶ 시 작 ◀◀◀◀
//********************************************************************

CW(); // BLDC 정방향

WORK();  //----------------------------------------------------- ◑ 2 0 0 도 달 성 ◑
         //3도씩 돌고 5초 쉬고 67번 반복 되는 함축 함수
         
delay(3000); // 과부하 방지용 3초 - delay 3000 (1000 - 1초)

CCW(); // ▶방향 변경◀ BLDC 역방향
TURN();  //----------------------------------------------------- ○ 다 시 0 도 달 성 ○

//------------------------  다 시 원 점 으 로  -------------------------------- 

WORK(); //----------------------------------------------------- ◐ -2 0 0 도 달 성 ◐
        //3도씩 돌고 5초 쉬고 67번 반복 되는 함축 함수
        
delay(3000); // 과부하 방지용 3초 - delay 3000 (1000 - 1초)

CW(); // ▶방향 변경◀ BLDC 정방향        
TURN(); //----------------------------------------------------- ○ 다 시 0 도 달 성 ○

//------------------------  다 시 원 점 으 로  -------------------------------- 

//********************************************************************
//                              ▶▶▶▶ 끝 ◀◀◀◀
//********************************************************************
digitalWrite(SIRN,255); //사이렌이 울린다 
Serial.print("끝----------------------");
delay(1000000000000000000000); //220V 전원이 꺼질 때 까지 무한한 시간으로

} // loop 함수 닫음



//********************************************************************
//                          함 수 설 정 구 역 
//********************************************************************

//▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼ 모 터 방 향 함 수 설 정 ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼ 

//---------------------------------------------------------------------------------------------
//                         C W 함 수 선 언 ( B L D C 모 터 " 정 방 향 " 각 도 변 경 )
//---------------------------------------------------------------------------------------------

void CW(){ // CW는 정방향을 뜻하는 함수
digitalWrite(DIR,0); // ▶방향 변경◀ BLDC 정방향 설정
delay(100); //안정화 delay 및 접촉용
            //현재 0.5초 입니다
} //함수 닫힘

//---------------------------------------------------------------------------------------------
//                         C C W 함 수 선 언 ( B L D C 모 터 " 역 방 향 " 각 도 변 경 )
//---------------------------------------------------------------------------------------------

void CCW(){ //CCW는 역방향을 뜻하는 함수 
digitalWrite(DIR,255); // ▶방향 변경◀ BLDC 역방향 설정
delay(100); //안정화 delay 및 접촉용
            //현재 0.5초 입니다
}

//▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲ 모 터 방 향 함 수 설 정 ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲

//---------------------------------------------------------------------------------------------
//                       C Y C L E 함 수 선 언 ( 3 도 회 전 / R P M 속 도 제 어  )
//---------------------------------------------------------------------------------------------
 //▶▶▶▶▶▶설명◀◀◀◀◀◀◀
 
 //CYCLE는 3도 회전 BLDC 움직임을 뜻함
 //이 함수 코딩 덕분에 다른 구역 하나하나 각도 조절을하지 않고 시간이나 다른 디테일은 여기서 수정하면
 //다른 구역에 있는 코딩도 전부 수정 된다.

void CYCLE(){ // *CYCLE 함수 3도 회전용 
  
analogWrite(RPM,51); // RPM "400"RPM (400RPM - 2000RPM 기준 0.2 x 255 = 51 analogWrite) 설정 변경 가능
delay(2000); // ★★★ 수정해야함 임의로 시간을 잠아놓은 것 ★★★ (각도 예시로 잡아놓은 3도의 움직임)

analogWrite(RPM,0); // RPM "0"RPM (모터의 멈춤을 의미)
delay(1000); // 5초 쉬고 

count ++; //위치 파악용 변수 "count" 가 상승
delay(1000); // 1초에 1번 (즉 1씩 상승)

Serial.println(count); // 위치 파악 용 시리얼 변수 (하나씩 1씩 올라가는 카운팅이 될 예정)

}
//---------------------------------------------------------------------------------------------
//                           T U R N  함 수 선 언 ( 원 래 각 도 0 도 리 셋 용  )
//---------------------------------------------------------------------------------------------
 //▶▶▶▶▶▶설명◀◀◀◀◀◀◀
               
 //TURN 함수는 빠른 속도로 다시 원래대로 돌아가기 위한 함수
 //***아직 속도 시간 미정
 //이 함수 코딩 덕분에 다른 구역 하나하나 각도 조절을하지 않고 시간이나 다른 디테일은 여기서 수정하면
 //다른 구역에 있는 코딩도 전부 수정 된다.

void TURN(){ // TURN 함수 200도 혹은 -200도 에서 0도로 다시 돌아올 때를 뜻함
  
analogWrite(RPM,102); // RPM "800"RPM (800RPM - 2000RPM 기준 0.4 * 255 = 102 analogWrite) 설정 변경 가능
delay(10000); // ★★★ 수정해야함 임의로 시간을 잠아놓은 것 ★★★ (각도 예시로 잡아놓은 3도의 움직임)
analogWrite(RPM,0); // RPM "0"RPM (모터의 멈춤을 의미)
delay(2000); // 5초 쉬고 
} //함수 닫음

//---------------------------------------------------------------------------------------------
//                         W O R K 함 수 선 언 ( C Y C L E 6 7 번 함 축 함 수 )
//---------------------------------------------------------------------------------------------
 //▶▶▶▶▶▶설명◀◀◀◀◀◀◀
 
 //WORK는 3도 회전 BLDC 움직임을 뜻하는 CYCLE 함수를 67번 모아놓은 함수
 //67번이면 3x67 = 약 201도로 회전 되어 200도를 방어할 수 있다.

void WORK(){ // *WORK 함수 200도 혹은 -200도 까지 가기 위한 67번 CYCLE 모아놓은 함수  
count = 0; //카운트 변수 리셋

//--------------------------------------------------------------- 시 작
CYCLE(); 
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
//---------------------------------------------------------------1 0 번
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
//---------------------------------------------------------------2 0 번
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
//---------------------------------------------------------------3 0 번
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
//---------------------------------------------------------------4 0 번
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
//---------------------------------------------------------------5 0 번
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
//---------------------------------------------------------------6 0 번
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
CYCLE();
//---------------------------------------------------------------6 7 번
} //함수 닫음
